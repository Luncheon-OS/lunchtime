#!/usr/bin/perl
use strict;
use warnings;

system "clear";

print "--== Luncheon OS Installer ==--\n";
print "/_\\ Whole-disk support only, currently.\n";

print `lsblk`;
print "==> Enter your disk's device node code: ";
my $dnCode = <>;
chomp $dnCode;

print "==> /_\\ Really proceed? This will erase YOUR WHOLE DISK. [y/n] ";
my $confirm = <>;
chomp $confirm;
exit 1 unless $confirm eq "y";

print "==> Enter your name: ";
my $name = <>;
chomp $name;
print "Hello, and welcome to Luncheon OS, $name!\n";

print "==> Enter a username for your new user: ";
my $username = <>;
chomp $username;

print "(i) For security reasons, your password will be entered near the end.\n";

print "/_\\ This is your FINAL chance before your data goes to get the milk. PROCEED? [y/n] ";
$confirm = <>;
chomp $confirm;
exit 1 unless $confirm eq "y";

print ":: Partitioning disk...\n";
my $parted_command = "parted /dev/$dnCode --script mklabel gpt mkpart 'EFI' fat32 0% 512MiB set 1 esp on mkpart 'luncheon-os' ext4 512MiB 100%";
my $result = system $parted_command;
die "(X) Failed to partition disk...\n(X) Process killed" if $result;

print ":: Formatting partitions...\n";
my $dnCodeSeparator = "";
if ($dnCode =~ m/nvme/) {
    $dnCodeSeparator = "p";
}

$result = system "mkfs.fat -F 32 -- /dev/${dnCode}${dnCodeSeparator}1";
die "(X) Failed to format EFI partition...\n(X) Process killed" if $result;
$result = system "mkfs.ext4 /dev/${dnCode}${dnCodeSeparator}2";
if ($result) {
    die "(X) Failed to format Luncheon OS partition...\n(X) Process killed";
}

print ":: Mounting partitions...\n";
$result = system "mount /dev/${dnCode}${dnCodeSeparator}2 /mnt";
if ($result) {
    die "(X) Failed to mount main partition...\n(X) Process killed";
}
$result = system "mount -m -- /dev/${dnCode}${dnCodeSeparator}1 /mnt/boot";
if ($result) {
    die "(X) Failed to mount EFI partition...\n(X) Process killed";
}

print ":: Initializing new public Pacman keyring and populating...\n";
$result = system "pacman-key --init; pacman-key --populate archlinux";
if ($result) {
    die "(X) Failed to public Pacman keyring and/or populate...\n(X) Process killed";
}

print "/_\\ Must install voooooooooooooooooolkan driver\n";
print ":: Please choose your 32-bit Vulkan driver.\n";
print "(i) CPU = processor; GPU = graphics/video card\n";
my @gpus = ("1. AMD/Intel processor (CPU+GPU)", "2. NVIDIA graphics card (GPU)");
print "(i) Available drivers:\n";
foreach (@gpus) {
    print "(i) $_\n";
}
print "==> Enter your driver type: ";
my $gpu = <>;
chomp $gpu;
$gpu = "lib32-mesa" if $gpu eq "1";
$gpu = "lib32-nvidia-utils" if $gpu eq "2";
print ":: Installing base system. This will take a bit; installing roughly 757 packages (bundles of code)...\n";
$result = system "pacstrap -K -- /mnt base linux linux-firmware grub amd-ucode intel-ucode efibootmgr sudo plasma dolphin konsole chromium sddm flatpak xdg-desktop-portal xdg-desktop-portal-kde ttf-liberation networkmanager $gpu steam gamescope";
if ($result) {
    die "(X) Failed to install base system...\n(X) Process killed";
}

print ":: Generating filesystem table...\n";
$result = system "genfstab -U /mnt >> /mnt/etc/fstab";
die "(X) Failed to generate filesystem table...\n(X) Process killed" if $result;

print ":: Fixing DNS resolving...\n";
$result = `ln -sf ../run/systemd/resolve/stub-resolv.conf /etc/resolv.conf`;
die "(X) Failed to fix DNS resolving...\n(X) Process killed" if $result;

print ":: Configuring your new install!\n";
if (fork) {
    wait;
} else {
    chroot "/mnt";

    $result = system "useradd -m -c '$name' -G wheel -s /bin/bash $username";
    die "(X) Failed to create new user...\n(X) Process killed" if $result;

    require Term::ReadKey;
    Term::ReadKey::ReadMode("noecho");
    print "==> Enter new password for $username: ";
    my $new_password = Term::ReadKey::ReadLine(0);
    Term::ReadKey::ReadMode("restore");
    print "\n";
    $result = system "passwd --stdin $username", "<", \*STDIN, out => "/dev/null", err => "/dev/null";
    die "(X) Failed to update password...\n(X) Process killed" if $result;

    $result = system "systemctl enable sddm";
    die "(X) Failed to enable SDDM...\n(X) Process killed" if $result;

    $result = system "systemctl enable NetworkManager";
    die "(X) Failed to enable NetworkManager...\n(X) Process killed" if $result;

    open "/etc/locale.gen" or die "(X) Failed to open /etc/locale.gen...\n(X) Process killed";
    truncate "/etc/locale.gen", 0;
    seek "/etc/locale.gen", 0, 0;
    print "/etc/locale.gen", "en_US.UTF-8 UTF-8\n";
    close "/etc/locale.gen";

    $result = `locale-gen`;
    die "(X) Failed to generate locales...\n(X) Process killed" if $result;

    open "/etc/locale.conf" or die "(X) Failed to open /etc/locale.conf...\n(X) Process killed";
    truncate "/etc/locale.conf", 0;
    seek "/etc/locale.conf", 0, 0;
    print "/etc/locale.conf", "LANG=en_US.UTF-8\n";
    close "/etc/locale.conf";

    open "/etc/sysctl.d/80-gamecompatibility.conf" or die "(X) Failed to open /etc/sysctl.d/80-gamecompatibility.conf\n(X) Process killed";
    truncate "/etc/sysctl.d/80-gamecompatibility.conf", 0;
    seek "/etc/sysctl.d/80-gamecompatibility.conf", 0, 0;
    print "/etc/sysctl.d/80-gamecompatibility.conf", "/etc/sysctl.d/80-gamecompatibility.conf\n";
    close "/etc/sysctl.d/80-gamecompatibility.conf";

    print ":: Installing GRUB bootloader...\n";
    $result = system "grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Luncheon_OS /dev/$dnCode";
    die "(X) Failed to install GRUB...\n(X) Process killed" if $result;

    my $fh = open "/etc/default/grub" or die "(X) Failed to open /etc/default/grub...\n(X) Process killed";
    while (my $line = <$fh>) {
        if ($line =~ m/GRUB_CMDLINE_LINUX_DEFAULT/) {
            print $fh "GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash nvidia-drm.modeset=1\"\n";
        } else {
            print $fh $line;
        }
    }
    close "/etc/default/grub";

    $result = `grub-mkconfig -o /boot/grub/grub.cfg`;
    die "(X) Failed to generate GRUB config file...\n(X) Process killed" if $result;

    exit;
}

print "/_\\ Hey! HEY! OVER HERE! If you log in and it's just a black screen, please reboot, and press \"Desktop Environment: Plasma (Wayland)\" and select Plasma (X11).
This is an issue with Wayland I used to be able to fix, but can't remember how anymore.\n";
print "[SUCCESS] Install successful! Reboot to enter Luncheon OS.\n";